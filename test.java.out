/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 5;
  @*/
public /*@ pure @*/ int boo21(){
  return 5;
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 5;
  @*/
public /*@ pure @*/ int boo22(){
  return boo21();
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 5;
  @*/
public /*@ pure @*/ int boo22_2(){
  int x = boo21();
  return x;
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 3+5;
  @*/
public /*@ pure @*/ int boo23(){
  int x = 3+boo21();
  return x;
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 3+6;
  @*/
public int boo24(){
  int x = 3+boo25(5);
  return x;
}

/*@ exceptional behavior
  @ requires i>10;
  @ signals Exception;
  @ also
  @ normal behavior
  @ requires i<=10;
  @ assignable \nothing;
  @ ensures \result == 6;
  @*/
public int boo25(int i){
  if(i>10){
    throw new Exception("meow");
  }
  else{
    return 6;
  }
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 5;
  @*/
public /*@ pure @*/ int boo26(){
  return boo27(5);
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 1;
  @*/
public /*@ pure @*/ int boo26_2(){
  return boo27(-1);
}

/*@ normal behavior
  @ requires i>=0;
  @ assignable \nothing;
  @ ensures \result == i;
  @ also
  @ normal behavior
  @ requires i<0;
  @ assignable \nothing;
  @ ensures \result == -1*i;
  @*/
public /*@ pure @*/ int boo27(int i){
  if(i>=0){
    return i;
  }
  else{
    int res = -1*i;
    return res;
  }
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 5;
  @*/
public int boo28(){
  try{
    int x = 3;
    if(x==3){
      throw new Exception("something");
    }
    else{
      return 1;
    }
  }
  catch(Exception e){
    return boo27(5);
  }
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 1;
  @ also
  @ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == 5;
  @*/
public int boo28_2(){
  try{
    int x = 0;
    if(x==3){
      throw new Exception("something");
    }
    else{
      return 1;
    }
  }
  catch(Exception e){
    return boo27(-5);
  }
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == false;
  @*/
public /*@ pure @*/ boolean boo29(){
  if(true){
    return false;
  }
  else{
    return true;
  }
}

/*@ normal behavior
  @ requires z>=0;
  @ assignable y, y1, y2, t1;
  @ ensures \result == 7 &&
  @         y==0 &&
  @         y1==0 &&
  @         y2==0 &&
  @         t1==7;
  @ also
  @ normal behavior
  @ requires z<0;
  @ assignable y, y1, y2, t2;
  @ ensures \result == 17 &&
  @         y==0 &&
  @         y1==0 &&
  @         y2==0 &&
  @         t2==17;
  @*/
public int boo30(int z){
  int x1 = 0;
  int x2 = 0;
  y = 0;
  y1 = 0;
  y2 = 0;
  if(z>=0){
    t1 = 7;
    return t1;
  }
  else{
    t2 = 17;
    return t2;
  }
}

/*@ normal behavior
  @ requires true;
  @ assignable z;
  @ ensures \result == 0 &&
  @         z==0;
  @*/
public int boo31(){
  z = 0;
  int x = z;
  return x;
}

/*@ normal behavior
  @ requires true;
  @ assignable z;
  @ ensures \result == 7 &&
  @         z==0;
  @*/
public int boo31_2(){
  z = 0;
  int x = z;
  return boo30(1);
}

/*@ normal behavior
  @ requires true;
  @ assignable \nothing;
  @ ensures \result == y1+y2+y3;
  @*/
public int boo32(){
  int x = y1+y2+y3;
  return x;
}

/*@ normal behavior
  @ requires i<=y &&
  @          i*i==y;
  @ assignable \nothing;
  @ ensures \result == i;
  @ also
  @ exceptional behavior
  @ requires i<=y &&
  @          i*i!=y &&
  @          i==y;
  @ signals Exception;
  @*/
public static int sqrt(int y) throws Exception{
  for(int i = 0; i<=y; i = i+1){
    int j = i*i;
    if(j==y){
      return i;
    }
    else{
      if(i==y){
        throw new Exception("not found");
      }
    }
  }
}

